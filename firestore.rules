/**
 * @fileOverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset is in prototyping mode. It prioritizes rapid iteration by focusing on strict authorization
 * based on user roles and ownership, while relaxing data validation. Schema enforcement is minimal.
 *
 * Data Structure:
 * The Firestore database contains three top-level collections: `notifications`, `course_materials`, and `assignments`.
 *
 * Key Security Decisions:
 * - Public read access is granted to `notifications`, `course_materials`, and `assignments` collections to enable open access and easy prototyping, but write access is denied.
 *
 * Denormalization for Authorization: N/A (no write access)
 * Structural Segregation: N/A (no user-specific data)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to notifications but restricts writes.
     * @path /notifications/{notificationId}
     * @allow (get, list) - Any user can read notifications.
     * @deny (create, update, delete) - No user can create, update, or delete notifications through the client.
     * @principle Grants public read access for prototyping but restricts modification.
     */
    match /notifications/{notificationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to course materials but restricts writes.
     * @path /course_materials/{courseMaterialId}
     * @allow (get, list) - Any user can read course materials.
     * @deny (create, update, delete) - No user can create, update, or delete course materials through the client.
     * @principle Grants public read access for prototyping but restricts modification.
     */
    match /course_materials/{courseMaterialId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to assignments but restricts writes.
     * @path /assignments/{assignmentId}
     * @allow (get, list) - Any user can read assignments.
     * @deny (create, update, delete) - No user can create, update, or delete assignments through the client.
     * @principle Grants public read access for prototyping but restricts modification.
     */
    match /assignments/{assignmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}