/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset is in prototyping mode. It prioritizes strong authorization
 * while relaxing data validation to accelerate development.  The rules
 * enforce access controls based on ownership where applicable, but do NOT
 * validate the specific data shapes.
 *
 * Data Structure:
 * The Firestore database contains three top-level collections: `notifications`,
 * `course_materials`, and `assignments`.  All collections are treated as publicly
 * readable, but write access is restricted to prevent unauthorized modifications.
 *
 * Key Security Decisions:
 * - Public Read Access: `notifications`, `course_materials`, and `assignments`
 *   are publicly readable.  This is suitable for prototyping but should be
 *   reviewed before production.
 * - No User Listing: Listing all users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to notifications, but restricts write access.
     * @path /notifications/{notificationId}
     * @allow get, list: Any unauthenticated user can read.
     * @allow create, update, delete: No one can write.
     * @deny create, update, delete: Always.
     * @principle Public read, no writes allowed.
     */
    match /notifications/{notificationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to course materials, but restricts write access.
     * @path /course_materials/{courseMaterialId}
     * @allow get, list: Any unauthenticated user can read.
     * @allow create, update, delete: No one can write.
     * @deny create, update, delete: Always.
     * @principle Public read, no writes allowed.
     */
    match /course_materials/{courseMaterialId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to assignments, but restricts write access.
     * @path /assignments/{assignmentId}
     * @allow get, list: Any unauthenticated user can read.
     * @allow create, update, delete: No one can write.
     * @deny create, update, delete: Always.
     * @principle Public read, no writes allowed.
     */
    match /assignments/{assignmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}