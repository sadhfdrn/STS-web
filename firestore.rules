/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset prioritizes secure access to course materials, assignments, and notifications,
 * with public read access and restricted write access. It ensures only authenticated users can create, update, or delete
 * documents, enforcing ownership where applicable. Data validation is limited to authorization-critical fields.
 * @data-structure The database consists of three top-level collections: 'notifications', 'course_materials', and 'assignments'.
 * @key-security-decisions Public read access is enabled for all collections to facilitate content sharing.
 * Write access (create, update, delete) is restricted to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read notifications, but restricts creation, updates, and deletion to authenticated users.
     * @path /notifications/{notificationId}
     * @allow (get, list): Anyone can read notifications.
     * @allow (create): Only authenticated users can create notifications.
     * @deny (create): An unauthenticated user attempts to create a notification.
     * @allow (update, delete): Only authenticated users can update/delete notifications.
     * @deny (update, delete): An unauthenticated user attempts to update/delete a notification.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /notifications/{notificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read course materials, but restricts creation, updates, and deletion to authenticated users.
     * @path /course_materials/{courseMaterialId}
     * @allow (get, list): Anyone can read course materials.
     * @allow (create): Only authenticated users can create course materials.
     * @deny (create): An unauthenticated user attempts to create course materials.
     * @allow (update, delete): Only authenticated users can update or delete course materials.
     * @deny (update, delete): An unauthenticated user attempts to update or delete course materials.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /course_materials/{courseMaterialId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read assignments, but restricts creation, updates, and deletion to authenticated users.
     * @path /assignments/{assignmentId}
     * @allow (get, list): Anyone can read assignments.
     * @allow (create): Only authenticated users can create assignments.
     * @deny (create): An unauthenticated user attempts to create an assignment.
     * @allow (update, delete): Only authenticated users can update or delete assignments.
     * @deny (update, delete): An unauthenticated user attempts to update or delete an assignment.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /assignments/{assignmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if a user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
}