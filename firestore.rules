/**
 * @description This ruleset enforces a public read policy for notifications, allowing anyone to view them.
 *  Write operations (create, update, delete) on notifications are restricted to authenticated users only.
 * @dataStructure The data is organized into a flat collection of notifications at the root level: /notifications/{notificationId}.
 * @keySecurityDecisions Notifications are publicly readable to facilitate broad information dissemination.
 *  Only authenticated users are permitted to create, modify, or delete notifications to prevent unauthorized content changes.
 *  The schemas are NOT strictly enforced in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read notifications, but restricts write access to authenticated users.
     * @path /notifications/{notificationId}
     * @allow (get, list)
     * @allow (create, update, delete) - Authenticated user.
     * @deny (create, update, delete) - Unauthenticated user.
     * @principle Allows public reads but requires authentication for writes.
     */
    match /notifications/{notificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read of course materials, but restricts write access.  Since the CourseMaterial entity lacks an ownership field, writes are currently disallowed.
     * @path /course_materials/{courseMaterialId}
     * @allow (get, list)
     * @deny (create, update, delete) - All users.  Writes are disabled until an ownership field is added to the schema.
     * @principle Public read, owner-only write (currently disabled due to missing ownership field).
     */
    match /course_materials/{courseMaterialId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read of assignments, but restricts write access.  Since the Assignment entity lacks an ownership field, writes are currently disallowed.
     * @path /assignments/{assignmentId}
     * @allow (get, list)
     * @deny (create, update, delete) - All users.  Writes are disabled until an ownership field is added to the schema.
     * @principle Public read, owner-only write (currently disabled due to missing ownership field).
     */
    match /assignments/{assignmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper function to determine if a user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}